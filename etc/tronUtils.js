const TronWeb = require('tronweb');
const HttpProvider = TronWeb.providers.HttpProvider; // This provider is optional, you can just use a url for the nodes instead
const fullNode = new HttpProvider(`${process.env.TRON_NETWORK_LINK}`); // Full node http endpoint
const solidityNode = new HttpProvider(`${process.env.TRON_NETWORK_LINK}`); // Solidity node http endpoint
const eventServer = `${process.env.TRON_NETWORK_LINK}/`; // Contract events http endpoint

function createAccount() {
    try {
        const tronWeb = new TronWeb(fullNode, solidityNode, eventServer);
        return tronWeb.createAccount();

    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function isAddress(address) {
    try {
        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer);
        return tronWeb.isAddress(address);

    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function getTRC10TokenBalance(privateKey, address) {
    try {
        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
        let account = await tronWeb.trx.getAccount(address);
        if (account.asset) {
            for (let i = 0; i < account.asset.length; i++) {
                if (account.asset[i].key == process.env.TRON_TOKEN_ID)
                    return account.asset[i].value;
                break;
            }
        }
        return 0;
    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function sendTRC10Token(to, amount, privateKey) {
    try {
        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
        let transaction = await tronWeb.trx.sendToken(to, amount, process.env.TRON_TOKEN_ID);
        return transaction.transaction.txID;

    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function getTransectionsByAddress(privateKey, address, limit, offset) {
    try {
        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
        let transections = await tronWeb.trx.getTransactionsRelated(address, 'all', limit, offset);
        let data = [];
        for (let i = 0; i < transections.length; i++) {
            data[i] = {
                'trx_id': transections[i].txID,
                'direction': transections[i].direction,
                'type': transections[i].raw_data.contract[0].type,
                'date_time': transections[i].raw_data.expiration,
                'amount': transections[i].raw_data.contract[0].parameter.value.amount,
                'to_address': tronWeb.address.fromHex(transections[i].raw_data.contract[0].parameter.value.to_address),
                'from_address': tronWeb.address.fromHex(transections[i].raw_data.contract[0].parameter.value.owner_address),
                //'asset_name': tronWeb.toUtf8(transections[i].raw_data.contract[0].parameter.value.asset_name),
            }
        }
        return data;
    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function getBandwidth(address) {
    try {
        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer);
        return await tronWeb.trx.getBandwidth(address);
    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function createSmartContract(issuerAddress) {
    try {
        let issuerAddress = 'TJydrRBz1yxHZqxTCakz9AcHXHcnnFuXPV';
        let privateKey = '44BD8278E103365FAAD929A2376A2CC5B3674CF2358A056465E0CE6BA9949DB0';

        let options = {
            abi: [{ "constant": true, "inputs": [], "name": "getMedicationRecords", "outputs": [{ "components": [{ "name": "name", "type": "string" }, { "name": "dose", "type": "string" }, { "name": "frequency", "type": "string" }, { "name": "physician", "type": "string" }, { "name": "createdAt", "type": "uint256" }], "name": "", "type": "tuple[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "user", "type": "address" }, { "name": "status", "type": "bool" }], "name": "updateAdmin", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "user", "type": "address" }, { "name": "name", "type": "string" }, { "name": "dose", "type": "string" }, { "name": "frequency", "type": "string" }, { "name": "physician", "type": "string" }], "name": "insertMedicationRecord", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "getProcedureRecords", "outputs": [{ "components": [{ "name": "procedure", "type": "string" }, { "name": "procedureDate", "type": "uint256" }, { "name": "createdAt", "type": "uint256" }], "name": "", "type": "tuple[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getAlergyRecords", "outputs": [{ "components": [{ "name": "substance", "type": "string" }, { "name": "category", "type": "string" }, { "name": "saverity", "type": "string" }, { "name": "reaction", "type": "string" }, { "name": "createdAt", "type": "uint256" }], "name": "", "type": "tuple[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "user", "type": "address" }], "name": "getAlergyRecords", "outputs": [{ "components": [{ "name": "substance", "type": "string" }, { "name": "category", "type": "string" }, { "name": "saverity", "type": "string" }, { "name": "reaction", "type": "string" }, { "name": "createdAt", "type": "uint256" }], "name": "", "type": "tuple[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "user", "type": "address" }], "name": "getMedicationRecords", "outputs": [{ "components": [{ "name": "name", "type": "string" }, { "name": "dose", "type": "string" }, { "name": "frequency", "type": "string" }, { "name": "physician", "type": "string" }, { "name": "createdAt", "type": "uint256" }], "name": "", "type": "tuple[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "user", "type": "address" }, { "name": "_substance", "type": "string" }, { "name": "_category", "type": "string" }, { "name": "_saverity", "type": "string" }, { "name": "_reaction", "type": "string" }], "name": "insertAlergyRecord", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "user", "type": "address" }, { "name": "procedure", "type": "string" }, { "name": "procedureDate", "type": "uint256" }], "name": "insertProcedureRecord", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "user", "type": "address" }], "name": "getProcedureRecords", "outputs": [{ "components": [{ "name": "procedure", "type": "string" }, { "name": "procedureDate", "type": "uint256" }, { "name": "createdAt", "type": "uint256" }], "name": "", "type": "tuple[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "inputs": [], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "previousOwner", "type": "address" }, { "indexed": true, "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_user", "type": "address" }, { "indexed": false, "name": "timestamp", "type": "uint256" }], "name": "AlergyRecord", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_user", "type": "address" }, { "indexed": false, "name": "timestamp", "type": "uint256" }], "name": "MedicationRecord", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_user", "type": "address" }, { "indexed": false, "name": "timestamp", "type": "uint256" }], "name": "ProcedureRecord", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "user", "type": "address" }, { "indexed": false, "name": "status", "type": "bool" }], "name": "Admin", "type": "event" }],
            bytecode: ''
        }

        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
        let transaction = await tronWeb.transactionBuilder.createSmartContract(options, issuerAddress);
        let signedTransaction = await tronWeb.trx.sign(transaction);
        let sendRawTransaction = await tronWeb.trx.sendRawTransaction(signedTransaction);

        return sendRawTransaction;

    } catch (error) {
        console.log(error);
        throw error;
    }
}

async function saveAllergyForm(address, substance, category, severity, reactions) {
    try {
        let privateKey = process.env.MAIN_ACCOUNT_PRIVATE_KEY;
        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
        let tronExecutor = await tronWeb.contract().at(`${process.env.SMART_CONTRACT_ADDRESS}`);
        let saveAllergy = await tronExecutor.insertAlergyRecord(address, substance, category, severity, reactions).send();
        return saveAllergy;

    } catch (error) {
        console.log(error)
    }
}

async function getAllergyForm(address) {
    try {
        let privateKey = 'C6A9E6585271BB9180C82933F9DBA5D2124B0AC0CA1B4D48A1381B18A0A5F345'
        let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
        let tronExecutor = await tronWeb.contract().at(`${process.env.SMART_CONTRACT_ADDRESS}`);
        let getAllergy = await tronExecutor.getAlergyRecords().call();
        
        return getAllergy;

    } catch (error) {
        console.log(error)
    }
}

//#region old methods used smart contract

// function getBalanceTrx(address) {
//     try {
//         const tronWeb = new TronWeb(fullNode, solidityNode, eventServer);
//         return tronWeb.trx.getBalance(address);
//     } catch (error) {
//         console.log(error)
//     }
// }

// async function getBalanceToken(privateKey, address) {
//     try {
//         const tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
//         let tronExecutor = await tronWeb.contract().at(`${process.env.SMART_CONTRACT_ADDRESS}`);
//         let decimals = await tronExecutor.decimals().call();
//         let balance = await tronExecutor.balanceOf(address).call();
//         return balance / Math.pow(10, decimals);

//     } catch (error) {
//         console.log(error)
//     }
// }

// async function getTotalSupply(privateKey) {
//     try {
//         const tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
//         let tronExecutor = await tronWeb.contract().at(`${process.env.SMART_CONTRACT_ADDRESS}`);
//         let decimals = await tronExecutor.decimals().call();
//         let supply = await tronExecutor.totalSupply().call();
//         return supply / Math.pow(10, decimals);

//     } catch (error) {
//         console.log(error)
//     }
// }

// async function sendTrx(to, amount, privateKey) {
//     try {
//         let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
//         let sendTransaction = await tronWeb.transactionBuilder.sendTrx(to, amount, "TJydrRBz1yxHZqxTCakz9AcHXHcnnFuXPV");
//         let signedTransaction = await tronWeb.trx.sign(sendTransaction);
//         let sendRawTransaction = await tronWeb.trx.sendRawTransaction(signedTransaction);
//         return sendRawTransaction;

//     } catch (error) {
//         console.log(error)
//     }
// }

// async function sendToken(to, amount, privateKey) {
//     try {
//         let tronWeb = new TronWeb(fullNode, solidityNode, eventServer, privateKey);
//         let tronExecutor = await tronWeb.contract().at(`${process.env.SMART_CONTRACT_ADDRESS}`);
//         let decimals = await tronExecutor.decimals().call();
//         amount = amount * Math.pow(10, decimals);
//         return await tronExecutor.transfer(to, amount).send();

//     } catch (error) {
//         console.log(error)
//     }
// }
//#endregion

module.exports = {
    createAccount,
    isAddress,
    getTRC10TokenBalance,
    sendTRC10Token,
    getTransectionsByAddress,
    getBandwidth,
    createSmartContract,
    saveAllergyForm,
    getAllergyForm
};